external interface Serializable {}

class IMS {
  depend java.io.Serializable;
  isA Serializable;
  private static final long serialVersionUID = -2683593616927798071L;
  
  public void reinitialize() {
    User.reinitializeAutouniqueID(this.getUsers());
    Product.reinitializeUniqueName(this.getProducts());
    Manager.reinitializeUniqueUserName(this.getManagers());
    Transaction.reinitializeAutouniqueID(this.getTransactions());
  }
}

class Manager {
  depend java.io.Serializable;
  isA Serializable;
  private static final long serialVersionUID = 2315072607928790501L;
  
  public static void reinitializeUniqueUserName(List<Manager> managers) {
    managersByUserName = new HashMap<String, Manager>();
    for (Manager manager : managers) {
      managersByUserName.put(manager.getUserName(), manager);
    }
  }
  
  }
 

class Product {
  depend java.io.Serializable;
  isA Serializable;
  private static final long serialVersionUID = 8896099581655989380L;

  public static void reinitializeUniqueName(List<Product> products) {
    productsByName = new HashMap<String, Product>();
    for (Product product : products) {
      productsByName.put(product.getName(), product);
    }
  }
  
  }
  
  class Customer {
  depend java.io.Serializable;
  isA Serializable;
  private static final long serialVersionUID = 2315070137928790501L;
  }
 

class Transaction {
  depend java.io.Serializable;
  isA Serializable;
  private static final long serialVersionUID = 8896099585515989380L;
  
  public static void reinitializeAutouniqueID(List<Transaction> transactions) {
    nextId = 0; 
    for (Transaction transaction : transactions) {
      if (transaction.getId() > nextId) {
        nextId = transaction.getId();
      }
    }
    nextId++;
  }

  }
  

class Warehouse {
  depend java.io.Serializable;
  isA Serializable;
  private static final long serialVersionUID = 386717977557499839L;
}

class User {

	depend java.io.Serializable;
  	isA Serializable;
  	private static final long serialVersionUID = 386717976743499839L;
	
	public static void reinitializeAutouniqueID(List<User> users) {
    nextId = 0; 
    for (User user : users) {
      if (user.getId() > nextId) {
        nextId = user.getId();
      }
    }
    nextId++;
  }

}

