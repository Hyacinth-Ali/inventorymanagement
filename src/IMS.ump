namespace dedon.motors.ims.model;

use IMSPersistence.ump;

class IMS
{
	1 <@>- * Product products;
	1 <@>- * Audit audits;
	1 <@>- 0..1 Warehouse warehouse;
	1 <@>- * Supplier suppliers;
	1 <@>- * Receipt receipts;
	1 <@>- * Employee employees;
	1 <@>- * Order orders;
	1 <@>- * Customer customers;
	1 <@>- * Transaction transactions;
	1 <@>- * Manager managers;
	1 <@>- * User users;
	
	public java.util.Date getCurrentDate() {
    java.util.Calendar cal = java.util.Calendar.getInstance();
    cal.set(Calendar.HOUR_OF_DAY, 0);
    cal.set(Calendar.MINUTE, 0);
    cal.set(Calendar.SECOND, 0);
    cal.set(Calendar.MILLISECOND, 0);
    java.util.Date date = cal.getTime();
    return date;
  }
}

class Product
{
  unique name;
  1 <@>- 0..* Item items;
  
  before constructor, setName {
  	if(aName == null || aName.length() == 0 ) {
  		throw new RuntimeException("The name of a product cannot be empty");
  	}
  	if (aName.length() > 25) {
  		throw new RuntimeException("Product character cannot be more than 25");
  	}
  }
  
} 

class Item {
	Double price;
	
	before constructor, setPrice {
  	if(aPrice == 0.00 ) {
  		throw new RuntimeException("Price of an item cannot be zero.");
  	}
  	if (aPrice < 0.00) {
  		throw new RuntimeException("Price of an item cannot be negative value.");
  	}
  }
}

class Warehouse
{

}


class UserRole {
	abstract;
}

class Manager
{
	isA UserRole;
	unique String userName;
	String password;
	
	before constructor, setUserName {
  	if(aUserName == null || aUserName.length() == 0 ) {
  		throw new RuntimeException("The user name of a manager cannot be empty");
  	}
  	if (aUserName.length() > 20 || aUserName.length() < 5) {
  		throw new RuntimeException("Manager user name character should be between 5 to 20 characters");
  	}
  }
  
  before constructor, setPassword {
  	if(aPassword == null || aPassword.length() == 0 ) {
  		throw new RuntimeException("The password of a manager cannot be empty");
  	}
  	if (aPassword.length() > 10 || aPassword.length() < 5) {
  		throw new RuntimeException("The password should be between 5 to 10 characters");
  	}
  }
}

class Customer {
	isA UserRole;
	unique String id;
	lazy Double debt;
}

class Transaction {
	Date date;
	autounique id;
	lazy Double totalAmount;
	lazy Double amountPaid; 
}

class User {
  	name;
 	autounique id;
 	
	before constructor, setName {
  	if(aName == null || aName.length() == 0 ) {
  		throw new RuntimeException("The name of a user cannot be empty");
  	}
  	if (aName.length() > 30) {
  		throw new RuntimeException("User characters of user name cannot be more than 30");
  	}
  	}
}

association {
	* Transaction transactions -- 1 Customer customer;
    1 Transaction -> * Product products;
    * Transaction transactions -- 1 Manager manager;
    1 User -> 1..2 UserRole roles;
    1 Transaction transaction -- 0..* Receipt receipts;
    1 Audit -> * Transaction transactions;
    1 Audit -> * Order orders;
    1 Order -> 0..1 Supplier supplier;
    1 Order -> 1..* Product products;
    0..1 Warehouse warehouse -- * Product products;
}

class Supplier {
	name;
}

class Audit {

}

class Receipt {
	Date date;
}

class Employee {
	isA UserRole;
	password;
	
	 before constructor, setPassword {
  	if(aPassword == null || aPassword.length() == 0 ) {
  		throw new RuntimeException("The password cannot be empty");
  	}
  	if (aPassword.length() > 10 || aPassword.length() < 5) {
  		throw new RuntimeException("The password should be between 5 to 10 characters");
  	}
  }
}

class Order {
	Date orderedDate;
	lazy Date arrivalDate;
}


